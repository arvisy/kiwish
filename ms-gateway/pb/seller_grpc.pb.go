// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: seller.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SellerServiceClient is the client API for SellerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellerServiceClient interface {
	// product
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	GetProductsBySeller(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetProductsByCategory(ctx context.Context, in *GetProductByCategoryRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	GetProductByID(ctx context.Context, in *GetProductByIDRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// seller
	AddSellerWithAddress(ctx context.Context, in *AddSellerWithAddressRequest, opts ...grpc.CallOption) (*SellerDetailResponse, error)
	GetAllSellers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSellersResponse, error)
	GetSellerByID(ctx context.Context, in *GetSellerByIDRequest, opts ...grpc.CallOption) (*SellerDetailResponse, error)
	GetSellerByName(ctx context.Context, in *GetSellerByNameRequest, opts ...grpc.CallOption) (*SellerDetailResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateSellerAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	UpdateSellerName(ctx context.Context, in *UpdateSellerNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSellerActivity(ctx context.Context, in *UpdateSellerActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sellerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerServiceClient(cc grpc.ClientConnInterface) SellerServiceClient {
	return &sellerServiceClient{cc}
}

func (c *sellerServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetProductsBySeller(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/GetProductsBySeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetProductsByCategory(ctx context.Context, in *GetProductByCategoryRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/GetProductsByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetProductByID(ctx context.Context, in *GetProductByIDRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/GetProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/seller.SellerService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) AddSellerWithAddress(ctx context.Context, in *AddSellerWithAddressRequest, opts ...grpc.CallOption) (*SellerDetailResponse, error) {
	out := new(SellerDetailResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/AddSellerWithAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetAllSellers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSellersResponse, error) {
	out := new(GetSellersResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/GetAllSellers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetSellerByID(ctx context.Context, in *GetSellerByIDRequest, opts ...grpc.CallOption) (*SellerDetailResponse, error) {
	out := new(SellerDetailResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/GetSellerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetSellerByName(ctx context.Context, in *GetSellerByNameRequest, opts ...grpc.CallOption) (*SellerDetailResponse, error) {
	out := new(SellerDetailResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/GetSellerByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateAddress(ctx context.Context, in *UpdateSellerAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/seller.SellerService/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateSellerName(ctx context.Context, in *UpdateSellerNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/seller.SellerService/UpdateSellerName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateSellerActivity(ctx context.Context, in *UpdateSellerActivityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/seller.SellerService/UpdateSellerActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerServiceServer is the server API for SellerService service.
// All implementations must embed UnimplementedSellerServiceServer
// for forward compatibility
type SellerServiceServer interface {
	// product
	AddProduct(context.Context, *AddProductRequest) (*ProductResponse, error)
	GetProductsBySeller(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	GetProductsByCategory(context.Context, *GetProductByCategoryRequest) (*GetProductsResponse, error)
	GetProductByID(context.Context, *GetProductByIDRequest) (*ProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*ProductResponse, error)
	// seller
	AddSellerWithAddress(context.Context, *AddSellerWithAddressRequest) (*SellerDetailResponse, error)
	GetAllSellers(context.Context, *emptypb.Empty) (*GetSellersResponse, error)
	GetSellerByID(context.Context, *GetSellerByIDRequest) (*SellerDetailResponse, error)
	GetSellerByName(context.Context, *GetSellerByNameRequest) (*SellerDetailResponse, error)
	UpdateAddress(context.Context, *UpdateSellerAddressRequest) (*AddressResponse, error)
	UpdateSellerName(context.Context, *UpdateSellerNameRequest) (*emptypb.Empty, error)
	UpdateSellerActivity(context.Context, *UpdateSellerActivityRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSellerServiceServer()
}

// UnimplementedSellerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSellerServiceServer struct {
}

func (UnimplementedSellerServiceServer) AddProduct(context.Context, *AddProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedSellerServiceServer) GetProductsBySeller(context.Context, *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsBySeller not implemented")
}
func (UnimplementedSellerServiceServer) GetProductsByCategory(context.Context, *GetProductByCategoryRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByCategory not implemented")
}
func (UnimplementedSellerServiceServer) GetProductByID(context.Context, *GetProductByIDRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByID not implemented")
}
func (UnimplementedSellerServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedSellerServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedSellerServiceServer) AddSellerWithAddress(context.Context, *AddSellerWithAddressRequest) (*SellerDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSellerWithAddress not implemented")
}
func (UnimplementedSellerServiceServer) GetAllSellers(context.Context, *emptypb.Empty) (*GetSellersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSellers not implemented")
}
func (UnimplementedSellerServiceServer) GetSellerByID(context.Context, *GetSellerByIDRequest) (*SellerDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerByID not implemented")
}
func (UnimplementedSellerServiceServer) GetSellerByName(context.Context, *GetSellerByNameRequest) (*SellerDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerByName not implemented")
}
func (UnimplementedSellerServiceServer) UpdateAddress(context.Context, *UpdateSellerAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedSellerServiceServer) UpdateSellerName(context.Context, *UpdateSellerNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerName not implemented")
}
func (UnimplementedSellerServiceServer) UpdateSellerActivity(context.Context, *UpdateSellerActivityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerActivity not implemented")
}
func (UnimplementedSellerServiceServer) mustEmbedUnimplementedSellerServiceServer() {}

// UnsafeSellerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellerServiceServer will
// result in compilation errors.
type UnsafeSellerServiceServer interface {
	mustEmbedUnimplementedSellerServiceServer()
}

func RegisterSellerServiceServer(s grpc.ServiceRegistrar, srv SellerServiceServer) {
	s.RegisterService(&SellerService_ServiceDesc, srv)
}

func _SellerService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetProductsBySeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetProductsBySeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/GetProductsBySeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetProductsBySeller(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetProductsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetProductsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/GetProductsByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetProductsByCategory(ctx, req.(*GetProductByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/GetProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetProductByID(ctx, req.(*GetProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_AddSellerWithAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSellerWithAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).AddSellerWithAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/AddSellerWithAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).AddSellerWithAddress(ctx, req.(*AddSellerWithAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetAllSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetAllSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/GetAllSellers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetAllSellers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetSellerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetSellerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/GetSellerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetSellerByID(ctx, req.(*GetSellerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetSellerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetSellerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/GetSellerByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetSellerByName(ctx, req.(*GetSellerByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateAddress(ctx, req.(*UpdateSellerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateSellerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateSellerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/UpdateSellerName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateSellerName(ctx, req.(*UpdateSellerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateSellerActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateSellerActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seller.SellerService/UpdateSellerActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateSellerActivity(ctx, req.(*UpdateSellerActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SellerService_ServiceDesc is the grpc.ServiceDesc for SellerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SellerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seller.SellerService",
	HandlerType: (*SellerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _SellerService_AddProduct_Handler,
		},
		{
			MethodName: "GetProductsBySeller",
			Handler:    _SellerService_GetProductsBySeller_Handler,
		},
		{
			MethodName: "GetProductsByCategory",
			Handler:    _SellerService_GetProductsByCategory_Handler,
		},
		{
			MethodName: "GetProductByID",
			Handler:    _SellerService_GetProductByID_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _SellerService_DeleteProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _SellerService_UpdateProduct_Handler,
		},
		{
			MethodName: "AddSellerWithAddress",
			Handler:    _SellerService_AddSellerWithAddress_Handler,
		},
		{
			MethodName: "GetAllSellers",
			Handler:    _SellerService_GetAllSellers_Handler,
		},
		{
			MethodName: "GetSellerByID",
			Handler:    _SellerService_GetSellerByID_Handler,
		},
		{
			MethodName: "GetSellerByName",
			Handler:    _SellerService_GetSellerByName_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _SellerService_UpdateAddress_Handler,
		},
		{
			MethodName: "UpdateSellerName",
			Handler:    _SellerService_UpdateSellerName_Handler,
		},
		{
			MethodName: "UpdateSellerActivity",
			Handler:    _SellerService_UpdateSellerActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seller.proto",
}
