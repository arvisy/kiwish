// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// order
	OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error)
	OrderUpdate(ctx context.Context, in *OrderUpdateRequest, opts ...grpc.CallOption) (*OrderUpdateResponse, error)
	OrderGetAllForCustomer(ctx context.Context, in *OrderGetAllForCustomerRequest, opts ...grpc.CallOption) (*OrderGetAllForCustomerResponse, error)
	OrderGetAllForSeller(ctx context.Context, in *OrderGetAllForSellerRequest, opts ...grpc.CallOption) (*OrderGetAllForSellerResponse, error)
	// courier
	AddCourierInfo(ctx context.Context, in *AddCourierInfoRequest, opts ...grpc.CallOption) (*CourierResponse, error)
	TrackCourierShipment(ctx context.Context, in *TrackCourierShipmentRequest, opts ...grpc.CallOption) (*CourierResponse, error)
	CustomerConfirmOrder(ctx context.Context, in *ConfirmOrderRequest, opts ...grpc.CallOption) (*ConfirmOrderResponse, error)
	GetCourierPrice(ctx context.Context, in *GetCourierPriceRequest, opts ...grpc.CallOption) (*GetCourierPriceResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error) {
	out := new(OrderCreateResponse)
	err := c.cc.Invoke(ctx, "/OrderService/OrderCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderUpdate(ctx context.Context, in *OrderUpdateRequest, opts ...grpc.CallOption) (*OrderUpdateResponse, error) {
	out := new(OrderUpdateResponse)
	err := c.cc.Invoke(ctx, "/OrderService/OrderUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderGetAllForCustomer(ctx context.Context, in *OrderGetAllForCustomerRequest, opts ...grpc.CallOption) (*OrderGetAllForCustomerResponse, error) {
	out := new(OrderGetAllForCustomerResponse)
	err := c.cc.Invoke(ctx, "/OrderService/OrderGetAllForCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderGetAllForSeller(ctx context.Context, in *OrderGetAllForSellerRequest, opts ...grpc.CallOption) (*OrderGetAllForSellerResponse, error) {
	out := new(OrderGetAllForSellerResponse)
	err := c.cc.Invoke(ctx, "/OrderService/OrderGetAllForSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddCourierInfo(ctx context.Context, in *AddCourierInfoRequest, opts ...grpc.CallOption) (*CourierResponse, error) {
	out := new(CourierResponse)
	err := c.cc.Invoke(ctx, "/OrderService/AddCourierInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TrackCourierShipment(ctx context.Context, in *TrackCourierShipmentRequest, opts ...grpc.CallOption) (*CourierResponse, error) {
	out := new(CourierResponse)
	err := c.cc.Invoke(ctx, "/OrderService/TrackCourierShipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CustomerConfirmOrder(ctx context.Context, in *ConfirmOrderRequest, opts ...grpc.CallOption) (*ConfirmOrderResponse, error) {
	out := new(ConfirmOrderResponse)
	err := c.cc.Invoke(ctx, "/OrderService/CustomerConfirmOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCourierPrice(ctx context.Context, in *GetCourierPriceRequest, opts ...grpc.CallOption) (*GetCourierPriceResponse, error) {
	out := new(GetCourierPriceResponse)
	err := c.cc.Invoke(ctx, "/OrderService/GetCourierPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// order
	OrderCreate(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error)
	OrderUpdate(context.Context, *OrderUpdateRequest) (*OrderUpdateResponse, error)
	OrderGetAllForCustomer(context.Context, *OrderGetAllForCustomerRequest) (*OrderGetAllForCustomerResponse, error)
	OrderGetAllForSeller(context.Context, *OrderGetAllForSellerRequest) (*OrderGetAllForSellerResponse, error)
	// courier
	AddCourierInfo(context.Context, *AddCourierInfoRequest) (*CourierResponse, error)
	TrackCourierShipment(context.Context, *TrackCourierShipmentRequest) (*CourierResponse, error)
	CustomerConfirmOrder(context.Context, *ConfirmOrderRequest) (*ConfirmOrderResponse, error)
	GetCourierPrice(context.Context, *GetCourierPriceRequest) (*GetCourierPriceResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) OrderCreate(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCreate not implemented")
}
func (UnimplementedOrderServiceServer) OrderUpdate(context.Context, *OrderUpdateRequest) (*OrderUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderUpdate not implemented")
}
func (UnimplementedOrderServiceServer) OrderGetAllForCustomer(context.Context, *OrderGetAllForCustomerRequest) (*OrderGetAllForCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderGetAllForCustomer not implemented")
}
func (UnimplementedOrderServiceServer) OrderGetAllForSeller(context.Context, *OrderGetAllForSellerRequest) (*OrderGetAllForSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderGetAllForSeller not implemented")
}
func (UnimplementedOrderServiceServer) AddCourierInfo(context.Context, *AddCourierInfoRequest) (*CourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourierInfo not implemented")
}
func (UnimplementedOrderServiceServer) TrackCourierShipment(context.Context, *TrackCourierShipmentRequest) (*CourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackCourierShipment not implemented")
}
func (UnimplementedOrderServiceServer) CustomerConfirmOrder(context.Context, *ConfirmOrderRequest) (*ConfirmOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerConfirmOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetCourierPrice(context.Context, *GetCourierPriceRequest) (*GetCourierPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierPrice not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_OrderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/OrderCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderCreate(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/OrderUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderUpdate(ctx, req.(*OrderUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderGetAllForCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderGetAllForCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderGetAllForCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/OrderGetAllForCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderGetAllForCustomer(ctx, req.(*OrderGetAllForCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderGetAllForSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderGetAllForSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderGetAllForSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/OrderGetAllForSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderGetAllForSeller(ctx, req.(*OrderGetAllForSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddCourierInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourierInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddCourierInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/AddCourierInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddCourierInfo(ctx, req.(*AddCourierInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TrackCourierShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackCourierShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TrackCourierShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/TrackCourierShipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TrackCourierShipment(ctx, req.(*TrackCourierShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CustomerConfirmOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CustomerConfirmOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/CustomerConfirmOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CustomerConfirmOrder(ctx, req.(*ConfirmOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCourierPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCourierPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetCourierPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCourierPrice(ctx, req.(*GetCourierPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderCreate",
			Handler:    _OrderService_OrderCreate_Handler,
		},
		{
			MethodName: "OrderUpdate",
			Handler:    _OrderService_OrderUpdate_Handler,
		},
		{
			MethodName: "OrderGetAllForCustomer",
			Handler:    _OrderService_OrderGetAllForCustomer_Handler,
		},
		{
			MethodName: "OrderGetAllForSeller",
			Handler:    _OrderService_OrderGetAllForSeller_Handler,
		},
		{
			MethodName: "AddCourierInfo",
			Handler:    _OrderService_AddCourierInfo_Handler,
		},
		{
			MethodName: "TrackCourierShipment",
			Handler:    _OrderService_TrackCourierShipment_Handler,
		},
		{
			MethodName: "CustomerConfirmOrder",
			Handler:    _OrderService_CustomerConfirmOrder_Handler,
		},
		{
			MethodName: "GetCourierPrice",
			Handler:    _OrderService_GetCourierPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
